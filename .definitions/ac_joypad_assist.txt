ac.getJoypadState(): ac.StateJoypadData
ac.setDualSenseTriggerNoEffect(triggerIndex: integer)
ac.setDualSenseTriggerContinuousResitanceEffect(triggerIndex: integer, startPosition: number, force: number)
ac.setDualSenseTriggerSectionResitanceEffect(triggerIndex: integer, startPosition: number, endPosition: number)
ac.setDualSenseTriggerExtendedEffect(triggerIndex: integer, startPosition: number, beginForce: number, middleForce: number, endForce: number, frequency: number, keepEffect: boolean)
ac.setDualSenseHapticParams(gamepadIndex: integer, key: ac.DualSenseHapticParam, value: vec4)
ac.setCustomDriverModelSteerAngle(angle: number)
ac.setHeatShimmerIntensity(key: integer, intensity: number): boolean
ac.setABS(mode: integer)
ac.setTC(mode: integer)
ac.isTurboWastegateAdjustable(turboIndex: integer): boolean
ac.setTurboWastegate(wastegate: number, turboIndex: integer = -1)
ac.setBrakeBias(balance: number)
ac.setEngineBrakeSetting(settingIndex: integer)
ac.setDRS(state: boolean)
ac.setKERS(state: boolean)
ac.setMGUHCharging(charging: boolean)
ac.setMGUKDelivery(level: integer)
ac.setMGUKRecovery(level: integer)
ac.switchToNeutralGear()
ac.setHeadlights(active: boolean)
ac.setWiperMode(wiperMode: integer)
ac.setHighBeams(active: boolean)
ac.setDaytimeLights(active: boolean)
ac.setBrakingLightsThreshold(threshold: number = 0.01)
ac.setTurningLights(mode: ac.TurningLights)
ac.setExtraSwitch(index: integer, value: boolean)
ac.getRealMirrorCount(): integer
ac.getRealMirrorAABB(mirrorIndex: integer, min: vec3, max: vec3): boolean
ac.setRealMirrorParams(mirrorIndex: integer, params: ac.RealMirrorParams)

struct ac.StateJoypadData {
	int gamepadIndex;
	int gamepadType;
	float steeringSpeed;
	float steeringGamma;
	float steeringFilter;
	float steeringDeadzone;
	float rumbleEffects;
	float speedSensitivity;
	float steerLock;
	float speedKmh;
	vec3 gForces;
	vec3 localAngularVelocity;
	float ffb;
	float mzForce;
	float steerRatio;
	float steerLinearRatio;
	float steerStickX;
	float steerStickY;
	float steerStick; // @hidden
	float localSpeedX; // Speed of front axle on X axis relative to car
	vec3 localVelocity; // Car velocity relative to car
	float ndSlipL; // At 1 left tyre is at its grip limit, above 1 for slipping tyre
	float ndSlipR; // At 1 left tyre is at its grip limit, above 1 for slipping tyre
	float ndSlipRL; // At 1 left tyre is at its grip limit, above 1 for slipping tyre
	float ndSlipRR; // At 1 left tyre is at its grip limit, above 1 for slipping tyre
	float surfaceVibrationGainLeft;
	float surfaceVibrationGainRight;
	float surfaceVibrationLengthLeft;
	float surfaceVibrationLengthRight;
	float gas;
	float brake;
	float steer;
	float clutch;
	float handbrake;
	bool gearUp;
	bool gearDown;
	bool drs;
	bool kers;
	bool brakeBalanceUp;
	bool brakeBalanceDown;
	bool absUp;
	bool absDown;
	bool tcUp;
	bool tcDown;
	bool turboUp;
	bool turboDown;
	bool engineBrakeUp;
	bool engineBrakeDown;
	bool mgukDeliveryUp;
	bool mgukDeliveryDown;
	bool mgukRecoveryUp;
	bool mgukRecoveryDown;
	bool lookingLeft;
	bool lookingRight;
	bool lookingBack;
	bool headlightsSwitch;
	bool headlightsFlash;
	bool changingCamera;
	bool horn;
	bool shifterSupported;
	int requestedGearIndex;
	int mguhMode;
	float vibrationLeft;
	float vibrationRight;
}