ac.loadSoundbank(soundbank: string, guids: string = nullptr): boolean // Returns `true` if both files were found. 
ac.isAudioReady(): boolean
ac.setAudioEventMultiplier(surfaceWav: string, mult: number): boolean
render.isVisible(center: vec3, radius: number): boolean
render.setBlendMode(mode: render.BlendMode)
render.setCullMode(mode: render.CullMode)
render.setDepthMode(mode: render.DepthMode)
render.glSetColor(color: rgbm)
render.glBegin(primitiveType: render.GLPrimitiveType)
render.glVertex(v: vec3)
render.glVertexTextured(v: vec3, uv: vec2)
render.glTexture(filename: string)
render.glEnd()
render.circle(pos: vec3, dir: vec3, radius: number, color: rgbm = rgbm(1, 1, 1, 1), borderColor: rgbm = nullptr)
render.rectangle(pos: vec3, dir: vec3, width: number, height: number, color: rgbm = rgbm(1, 1, 1, 1))
render.quad(p1: vec3, p2: vec3, p3: vec3, p4: vec3, color: rgbm = rgbm(1, 1, 1, 1), texture: string = nullptr)
render.setTransform(t: mat4x4, applySceneOriginOffset: boolean = false)
render.debugText(pos: vec3, text: string, color: rgbm = rgbm(1, 1, 1, 1), scale: number = 1, align: render.FontAlign = AC::FontAlign::center)
render.debugSphere(center: vec3, radius: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugCross(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugBox(center: vec3, size: vec3, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPoint(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPlane(center: vec3, dir: vec3, color: rgbm = rgbm(3, 0, 0, 1), size: number = 1)
render.debugLine(from: vec3, to: vec3, color: rgbm = rgbm(3, 0, 0, 1))
render.debugArrow(from: vec3, to: vec3, size: number = -1, color: rgbm = rgbm(3, 0, 0, 1))
render.getRenderTargetSize(): vec2
render.backupRenderTarget(): boolean
render.restoreRenderTarget(): boolean
render.createRay(pos: vec3, dir: vec3, length: number = -1): ray
render.createMouseRay(): ray
render.createPointRay(onscreenPoint: vec2): ray
render.isPositioningHelperBusy(): boolean
ui.beginToolWindow(windowID: string, pos: vec2, size: vec2, noPadding: boolean)
ui.endToolWindow()
ui.beginTransparentWindow(windowID: string, pos: vec2, size: vec2, noPadding: boolean)
ui.endTransparentWindow()
ui.text(text: string)
ui.textAligned(text: string, alignment: vec2, size: vec2 = vec2())
ui.textWrapped(text: string, wrapPos: number = 0)
ui.textColored(text: string, color: rgbm)
ui.labelText(label: string, text: string)
ui.textDisabled(text: string)
ui.isKnownIcon24(iconID: string): boolean
ui.icon(iconID: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1), iconSize: vec2 = nullptr)
ui.addIcon(iconID: string, size: vec2, alignment: vec2, colorOpt: rgbm = nullptr, padding: vec2 = nullptr)
ui.icon24(iconID: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.icon32(iconID: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.icon64(iconID: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.flag(iconID: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.getCursor(): vec2
ui.setCursor(v: vec2)
ui.offsetCursor(v: vec2)
ui.getCursorX(): number
ui.setCursorX(v: number)
ui.getCursorY(): number
ui.setCursorY(v: number)
ui.offsetCursorX(v: number)
ui.offsetCursorY(v: number)
ui.sameLine(offsetFromStart: number = 0, spacing: number = -1)
ui.newLine(spacing: number = -1)
ui.beginGroup()
ui.endGroup()
ui.availableSpaceX(): number
ui.availableSpaceY(): number
ui.availableSpace(): vec2
ui.imageSize(filename: string): vec2
ui.decodeImage(data: string): string
ui.drawImage(filename: string, p1: vec2, p2: vec2, color: rgbm = rgbm(1, 1, 1, 1), uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), keepAspectRatio: boolean = false)
ui.drawImageRounded(filename: string, p1: vec2, p2: vec2, color: rgbm = rgbm(1, 1, 1, 1), uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), rounding: number = 1, corners: ui.CornerFlags = ImDrawCornerFlags_All)
ui.drawImageQuad(filename: string, p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm = rgbm(1, 1, 1, 1), uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 0), uv3: vec2 = vec2(1, 1), uv4: vec2 = vec2(0, 1))
ui.drawQuadFilled(p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm = rgbm(1, 1, 1, 1))
ui.drawQuad(p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm = rgbm(1, 1, 1, 1))
ui.beginTextureShade(filename: string)
ui.endTextureShade(p1: vec2, p2: vec2, uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), clamp: boolean = true)
ui.beginGradientShade()
ui.endGradientShade(p1: vec2, p2: vec2, col1: rgbm = rgbm(1, 1, 1, 1), col2: rgbm = rgbm(1, 1, 1, 1))
ui.pushClipRect(p1: vec2, p2: vec2, intersectWithExisting: boolean = true)
ui.pushClipRectFullScreen()
ui.popClipRect()
ui.drawRect(p1: vec2, p2: vec2, color: rgbm, rounding: number = 0, roundingFlags: ui.CornerFlags = ImDrawCornerFlags_All, thickness: number = 1)
ui.drawRectFilled(p1: vec2, p2: vec2, color: rgbm, rounding: number = 0, roundingFlags: ui.CornerFlags = ImDrawCornerFlags_All)
ui.drawRectFilledMultiColor(p1: vec2, p2: vec2, colorTopLeft: rgbm, colorTopRight: rgbm, colorBottomRight: rgbm, colorBottomLeft: rgbm)
ui.drawLine(p1: vec2, p2: vec2, color: rgbm, thickness: number = 1)
ui.drawBezierCurve(p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm, thickness: number = 1)
ui.drawCircle(p1: vec2, radius: number, color: rgbm, numSegments: integer = 12, thickness: number = 1)
ui.drawCircleFilled(p1: vec2, radius: number, color: rgbm, numSegments: integer = 12)
ui.drawEllipseFilled(p1: vec2, radius: vec2, color: rgbm, numSegments: integer = 12)
ui.drawTriangle(p1: vec2, p2: vec2, p3: vec2, color: rgbm, thickness: number = 1)
ui.drawTriangleFilled(p1: vec2, p2: vec2, p3: vec2, color: rgbm)
ui.drawText(text: string, pos: vec2, color: rgbm)
ui.dwriteDrawText(text: string, fontSize: number, pos: vec2, color: rgbm)
ui.pathClear()
ui.pathLineTo(pos: vec2)
ui.pathLineToMergeDuplicate(pos: vec2)
ui.pathFillConvex(color: rgbm)
ui.pathStroke(color: rgbm, closed: boolean, thickness: number = 1)
ui.pathArcTo(center: vec2, radius: number, angleFrom: number, angleTo: number, numSegments: integer = 10)
ui.pathUnevenArcTo(center: vec2, radius: vec2, angleFrom: number, angleTo: number, numSegments: integer = 10)
ui.pathVariableArcTo(center: vec2, radiusFrom: number, radiusTo: number, angleFrom: number, angleTo: number, numSegments: integer = 10)
ui.pathArcToFast(center: vec2, radius: number, angleMinOf_12: integer, angleMaxOf_12: integer)
ui.pathBezierCurveTo(p1: vec2, p2: vec2, p3: vec2, numSegments: integer = 0)
ui.pathRect(rectMin: vec2, rectMax: vec2, rounding: number = 0, roundingCorners: ui.CornerFlags = ImDrawCornerFlags_All)
ui.glowRectFilled(p1: vec2, p2: vec2, color: rgbm, noClip: boolean = false)
ui.glowCircleFilled(p1: vec2, radius: number, color: rgbm, noClip: boolean = false)
ui.glowEllipseFilled(p1: vec2, radius: vec2, color: rgbm, noClip: boolean = false)
ui.getDrawCommandsCount(): integer
ui.beginTextureSaturationAdjustment()
ui.endTextureSaturationAdjustment(value: number)
ui.beginOutline()
ui.endOutline(color: rgbm, scale: number = 1)
ui.beginSharpening()
ui.endSharpening(sharpening: number = 1)
ui.beginBlurring()
ui.endBlurring(blurring: vec2)
ui.beginRotation()
ui.endRotation(deg: number, offset: vec2 = vec2())
ui.endPivotRotation(deg: number, pivot: vec2, offset: vec2 = vec2())
ui.applyTransformationToWindows(active: boolean = true)
ui.beginScale()
ui.endScale(scale: vec2)
ui.endPivotScale(scale: vec2, pivot: vec2)
ui.beginTransformMatrix()
ui.endTransformMatrix(mat: mat3x3)
ui.popStyleVar(count: integer = 1)
ui.pushStyleColor(varID: ui.StyleColor, value: rgbm)
ui.popStyleColor(count: integer = 1)
ui.pushFont(fontType: integer)
ui.popFont()
ui.pushItemWidth(itemWidth: number)
ui.popItemWidth()
ui.pushTextWrapPosition(wrapPos: number)
ui.popTextWrapPosition()
ui.areaVisible(size: vec2): boolean
ui.rectVisible(p1: vec2, p2: vec2): boolean
ui.rectHovered(p1: vec2, p2: vec2, clip: boolean = true): boolean
ui.setItemDefaultFocus()
ui.setKeyboardFocusHere(offset: integer = 0)
ui.getScrollX(): number
ui.getScrollY(): number
ui.getScrollMaxX(): number
ui.getScrollMaxY(): number
ui.setScrollX(scrollX: number, relative: boolean = false, smooth: boolean = true)
ui.setScrollY(scrollY: number, relative: boolean = false, smooth: boolean = true)
ui.setScrollHereX(centerXRatio: number = 0.5)
ui.setScrollHereY(centerYRatio: number = 0.5)
ui.windowHovered(flags: ui.HoveredFlags = ImGuiHoveredFlags_None): boolean
ui.windowFocused(flags: ui.FocusedFlags = ImGuiFocusedFlags_None): boolean
ui.mouseBusy(): boolean
ui.mouseClicked(mouseButton: integer = 0): boolean
ui.mouseDoubleClicked(mouseButton: integer = 0): boolean
ui.mouseReleased(mouseButton: integer = 0): boolean
ui.mouseDown(mouseButton: integer = 0): boolean
ui.mousePos(): vec2 // Mouse cursor position in pixels, or (-1, -1) if mouse is not available.
ui.mouseLocalPos(): vec2 // Mouse cursor position in pixels, or (-1, -1) if mouse is not available.
ui.itemRectMin(): vec2
ui.itemRectMax(): vec2
ui.deltaTime(): number
ui.itemRectSize(): vec2
ui.mouseDelta(): vec2
ui.mouseWheel(): number
ui.windowPos(): vec2
ui.windowSize(): vec2
ui.windowContentSize(): vec2
ui.windowContentExplicitSize(): vec2
ui.setNextWindowContentSize(size: vec2)
ui.keyboardButtonDown(keyIndex: ui.KeyIndex): boolean
ui.keyboardButtonPressed(keyIndex: ui.KeyIndex, withRepeat: boolean = true): boolean
ui.keyboardButtonReleased(keyIndex: ui.KeyIndex): boolean
ui.setKeyboardButtonDown(keyIndex: ui.KeyIndex)
ui.addInputCharacter(keyIndex: ui.KeyIndex)
ui.clearInputCharacters()
ui.keyPressed(keyCode: ui.Key): boolean
ui.getKeyIndex(keyCode: ui.Key): ui.KeyIndex
ui.hotkeyCtrl(): boolean
ui.hotkeyAlt(): boolean
ui.hotkeyShift(): boolean
ui.setShadingOffset(brightness: number = 1, offset: number = 0, alphaMult: number = 1, alphaOffset: number = 0)
ui.resetShadingOffset()
ui.acText(text: string, letter: vec2, marginOffset: number = 0, color: rgbm = rgbm(1, 1, 1, 1), lineSpace: number = 0, monospace: boolean = true)
ui.calculateACTextSize(text: string, letter: vec2, marginOffset: number = 0, lineSpace: number = 0, monospace: boolean = true): vec2
ui.pushACFont(name: string)
ui.popACFont()
ui.pushDWriteFont(name: string = "Segoe UI")
ui.popDWriteFont()
ui.measureText(text: string, wrapWidth: number = -1): vec2
ui.measureDWriteText(text: string, fontSize: number = 14, wrapWidth: number = -1): vec2
ui.dwriteText(text: string, fontSize: number = 14, color: rgbm = rgbm(1, 1, 1, 1))
ui.dwriteTextWrapped(text: string, fontSize: number = 14, color: rgbm = rgbm(1, 1, 1, 1))
ui.dwriteTextAligned(text: string, fontSize: number = 14, horizontalAligment: ui.Alignment = alignment::center, verticalAlignment: ui.Alignment = alignment::center, size: vec2 = vec2(), allowWordWrapping: boolean = false, color: rgbm = rgbm(1, 1, 1, 1))
ui.popID()
ui.getLastID(): integer
ui.getActiveID(): integer
ui.getFocusID(): integer
ui.getHoveredID(): integer
ui.clearActiveID()
ui.activateItem(id: integer)
ui.loadStoredNumber(id: integer = 0, defaultValue: number = 0): number
ui.loadStoredBool(id: integer = 0, defaultValue: boolean = false): boolean
ui.storeNumber(id: integer = 0, value: number = 0)
ui.storeBool(id: integer = 0, value: boolean = false)
ui.columns(columns: integer = 1, border: boolean = true, id: string = nullptr)
ui.nextColumn()
ui.setColumnWidth(columnIndex: integer, width: number)
ui.copyable(label: string)
ui.button(label: string, size: vec2 = vec2(), flags: ui.ButtonFlags = ImGuiButtonFlags_None): boolean
ui.smallButton(label: string): boolean
ui.invisibleButton(label: string, size: vec2): boolean
ui.dummy(size: vec2)
ui.arrowButton(strID: string, dir: ui.Direction, size: vec2 = vec2(), flags: ui.ButtonFlags = ImGuiButtonFlags_None): boolean
ui.bullet()
ui.separator()
ui.checkbox(label: string, checked: refbool): boolean // Returns `true` if checkbox was clicked.
ui.radioButton(label: string, checked: refbool): boolean
ui.progressBar(fraction: number, size: vec2 = vec2(), overlay: string = nullptr)
ui.setNextItemWidth(width: number)
ui.beginCombo(label: string, previewValue: string, flags: ui.ComboFlags = ImGuiComboFlags_None): boolean
ui.selectable(label: string, selected: refbool, flags: ui.SelectableFlags = ImGuiSelectableFlags_None, size: vec2 = vec2()): boolean
ui.endCombo()
ui.beginChild(id: string, size: vec2 = vec2(), border: boolean = false, flags: ui.WindowFlags = ImGuiWindowFlags_NoBackground): boolean
ui.endChild()
ui.beginTabBar(id: string, flags: ui.TabBarFlags = ImGuiTabBarFlags_None): boolean
ui.endTabBar()
ui.beginTabItem(label: string, flags: ui.TabItemFlags = ImGuiTabItemFlags_None): boolean
ui.endTabItem()
ui.beginTreeNode(label: string, flags: ui.TreeNodeFlags = ImGuiTreeNodeFlags_Framed): boolean
ui.endTreeNode()
ui.beginPopupContextItem(id: string, mouseButton: integer = 1): boolean
ui.endPopup()
ui.beginTooltip(padding: vec2 = vec2(20, 8))
ui.endTooltip()
ui.header(text: string)
ui.bulletText(text: string)
ui.setTooltip(tooltip: string)
ui.itemHovered(flags: ui.HoveredFlags = ImGuiHoveredFlags_None): boolean
ui.itemClicked(mouseButton: integer = 0): boolean
ui.itemActive(): boolean
ui.itemFocused(): boolean
ui.itemVisible(): boolean
ui.itemEdited(): boolean
ui.itemActivated(): boolean
ui.itemDeactivated(): boolean
ui.itemDeactivatedAfterEdit(): boolean
ui.anyItemHovered(): boolean
ui.anyItemActive(): boolean
ui.anyItemFocused(): boolean
ui.getItemRectMin(): vec2
ui.getItemRectMax(): vec2
ui.getItemRectSize(): vec2
ui.setItemAllowOverlap()
ui.itemToggledSelection(): boolean
ui.image(filename: string, size: vec2, color: rgbm = rgbm(1, 1, 1, 1), borderColor: rgbm = nullptr, uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), keepAspectRatio: boolean = false)
ui.imageButton(filename: string, size: vec2, color: rgbm = rgbm(1, 1, 1, 1), bgColor: rgbm = nullptr, uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), framePadding: number = -1, keepAspectRatio: boolean = false): boolean
ui.isImageReady(filename: string): boolean
ui.setAsynchronousImagesLoading(value: boolean = true)
ui.calcItemWidth(): number
ui.pushAllowKeyboardFocus(allowKeyboardFocus: boolean)
ui.popAllowKeyboardFocus()
ui.pushButtonRepeat(repeatValue: boolean)
ui.popButtonRepeat()
ui.indent(indentW: number = 0.0)
ui.unindent(indentW: number = 0.0)
ui.cursorStartPos(): vec2
ui.cursorScreenPos(): vec2
ui.setCursorScreenPos(pos: vec2)
ui.alignTextToFramePadding()
ui.textLineHeight(): number
ui.textLineHeightWithSpacing(): number
ui.frameHeight(): number
ui.frameHeightWithSpacing(): number
ui.fontSize(): number
ui.fontWhitePixelUV(): vec2
ui.pushStyleVarAlpha(alpha: number)
ui.setScrollFromPosX(localX: number, centerXRatio: number = 0.5)
ui.setScrollFromPosY(localY: number, centerYRatio: number = 0.5)
ui.windowWidth(): number
ui.windowHeight(): number
ui.isWindowAppearing(): boolean
ui.isWindowCollapsed(): boolean
ui.isWindowFocused(flags: ui.FocusedFlags = ImGuiFocusedFlags_None): boolean
ui.keyPressedAmount(keyIndex: integer, repeatDelay: number, rate: number): integer
ui.isAnyMouseDown(): boolean
ui.isMouseReleased(mouseButton: integer = 0): boolean
ui.isMouseDragging(mouseButton: integer = 0, lockThreshold: number = -1.0): boolean
ui.mousePosOnOpeningCurrentPopup(): vec2
ui.mouseDragDelta(mouseButton: integer = 0, lockThreshold: number = -1.0): vec2
ui.resetMouseDragDelta(mouseButton: integer = 0)
ui.mouseCursor(): ui.MouseCursor
ui.setMouseCursor(type: ui.MouseCursor)
ui.captureKeyboard(wantCaptureKeyboardValue: boolean = true)
ui.captureMouse(wantCaptureMouseValue: boolean = true)
ui.getClipboardText(): string
ui.setClipboardText(text: string)
ui.time(): number
ui.frameCount(): integer
ui.modalPopup(title: string, msg: string, okText: string, cancelText: string, okIconID: string, cancelIconID: string, callback: integer)
ui.modalPrompt(title: string, msg: string, defaultValue: string, okText: string, cancelText: string, okIconID: string, cancelIconID: string, callback: integer)
ui.projectPoint(pos: vec3, considerUiScale: boolean = true): vec2 // Returns vector with `inf` for values if point is outside of screen.
ui.unloadImage(filename: string): boolean // Returns `true` if file was unloaded successfully.
physics.teleportCarTo(carIndex: integer, spawnSet: string)
physics.setCarPosition(carIndex: integer, pos: vec3, dir: vec3)
physics.setCarVelocity(carIndex: integer, velocity: vec3)
physics.engageGear(carIndex: integer, gearToEngage: integer)
physics.setAILevel(carIndex: integer, level: number)
physics.setAIAggression(carIndex: integer, aggression: number)
physics.setAIThrottleLimit(carIndex: integer, limit: number)
physics.setAITopSpeed(carIndex: integer, limit: number)
physics.setGentleStop(carIndex: integer, stop: boolean = true)
physics.forceUserBrakesFor(time: number, brakingIntensity: number = 1)
physics.forceUserThrottleFor(time: number, throttleIntensity: number = 1)
physics.offsetUserSteering(offset: number)
physics.overrideUserSteering(value: number, share: number)
physics.resetCarState(carIndex: integer, fuelMult: number = 0.5)
physics.setCarFuel(carIndex: integer, fuelLiters: number)
physics.setCarNoInput(active: boolean = true)
physics.setCarAutopilot(active: boolean = true)
physics.getCarInputControls(): ac_car_controls
physics.setGripDecrease(carIndex: integer, wheels: ac.Wheel, decrease: number)
physics.blowTyres(carIndex: integer, wheels: ac.Wheel = 15)
physics.setTyresBlankets(carIndex: integer, wheels: ac.Wheel = 15, blanketActive: boolean = true)
physics.setTyresTemperature(carIndex: integer, wheels: ac.Wheel, temperature: number)
physics.setCarBodyDamage(carIndex: integer, bodyDamage: vec4)
physics.setCarEngineLife(carIndex: integer, engineLife: number)
physics.setCarBallast(carIndex: integer, ballast: number)
physics.setCarRestrictor(carIndex: integer, restrictor: number)
physics.setCarPenalty(penaltyType: ac.PenaltyType, penaltyParam: integer = -1)
physics.awakeCar(carIndex: integer)
physics.addForce(carIndex: integer, position: vec3, posLocal: boolean, force: vec3, forceLocal: boolean)
physics.markLapAsSpoiled(carIndex: integer)
physics.setEngineStallEnabled(carIndex: integer, value: boolean = true)
physics.setEngineRPM(carIndex: integer, rpm: number)
physics.setDriverName(name: string, nationCode: string = nullptr)
physics.setDriverTeam(team: string)
physics.overrideRacingFlag(flag: ac.FlagType)
physics.allowed(): boolean
physics.raycastTrack(pos: vec3, dir: vec3, length: number, point: vec3 = nullptr, normal: vec3 = nullptr): number
ac.setDriverVisible(carIndex: integer, isVisible: boolean)
ac.setDriverDoorOpen(carIndex: integer, isOpen: boolean)
ac.setTrackCondition(key: string, value: number)
ac.setCurrentCamera(mode: ac.CameraMode)
ac.setCurrentDrivableCamera(mode: ac.DrivableCamera)
ac.setCurrentCarCamera(mode: integer)
ac.setCurrentTrackCamera(set: integer)
ac.recenterVR()
ac.focusCar(index: integer)
ac.restartAssettoCorsa(raceIni: string = nullptr)
ac.shutdownAssettoCorsa()
ac.sendChatMessage(command: string): boolean // Returns `false` if message couldn’t be sent (trying to send too often, or not online)
ac.onChatMessage(callback: integer): lua_linked_id
ac.setCameraPosition(pos: vec3)
ac.setCameraDirection(look: vec3, up: vec3 = vec3(0, 1, 0))
ac.setCameraFOV(fov: number)
ac.setCameraExposure(exposure: number)
ac.setCameraDOF(distance: number)
ac.pauseFilesWatching(pause: boolean)
ac.debugLights(filter: string, count: integer, mode: ac.LightsDebugMode, distance: number = 100)
ac.isPythonAppActive(appName: string): boolean
ac.reloadPythonApp(appName: string): boolean
ac.resetCar()
ac.takeAStepBack()
ac.setWeatherTimeMultiplier(multiplier: number)
ac.setWeatherTimeOffset(offset: number)
ac.setVAOMode(mode: ac.VAODebugMode)
ac.getVAOMode(): ac.VAODebugMode
ac.setAudioVolume(audioChannelKey: string, value: number)
ac.setWiperSpeed(carIndex: integer, wiperSpeed: integer)
ac.markLapAsSpoiled()
ac.setReplayPosition(frameIndex: integer, playCounter: number)
ac.consoleExecute(command: string)
ac.onConsoleInput(callback: integer): lua_linked_id
ac.onAudioVolumeCalculation(callback: integer): lua_linked_id
ac.reloadControlSettings()
ac.setFFBMultiplier(multiplier: number)
ac.setOnboardCameraFOV(fovDeg: number)
ac.resetOnboardCameraFOV()
ac.setFirstPersonCameraFOV(fovDeg: number)
ac.resetFirstPersonCameraFOV()
ac.getOnboardCameraParams(carIndex: integer): ac.SeatParams
ac.getOnboardCameraDefaultParams(carIndex: integer): ac.SeatParams
ac.setOnboardCameraParams(carIndex: integer, params: ac.SeatParams, save: boolean = true)
ac.areOnboardCameraParamsNeedSaving(): boolean
ac.makeScreenshot(filename: string = nullptr)
ac.isAISplineRecorderPresent(): boolean
ac.isAISplineRecorderActive(): boolean
ac.isAISplineRecorderRecordingPitLane(): boolean
ac.getAISplineRecordedFrames(): integer
ac.startAISplineRecorder(recordPitLane: boolean = false)
ac.stopAISplineRecorder(saveResult: boolean, callback: integer)
ac.setABS(mode: integer)
ac.setTC(mode: integer)
ac.isTurboWastegateAdjustable(turboIndex: integer): boolean
ac.setTurboWastegate(wastegate: number, turboIndex: integer = -1)
ac.setBrakeBias(balance: number)
ac.setEngineBrakeSetting(settingIndex: integer)
ac.setDRS(state: boolean)
ac.setKERS(state: boolean)
ac.setMGUHCharging(charging: boolean)
ac.setMGUKDelivery(level: integer)
ac.setMGUKRecovery(level: integer)
ac.switchToNeutralGear()
ac.setHeadlights(active: boolean)
ac.setHighBeams(active: boolean)
ac.setExtraSwitch(index: integer, value: boolean)
ac.getRealMirrorCount(): integer
ac.getRealMirrorAABB(mirrorIndex: integer, min: vec3, max: vec3): boolean
ac.setRealMirrorParams(mirrorIndex: integer, params: ac.RealMirrorParams)