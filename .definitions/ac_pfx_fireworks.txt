ac.getRandomFireworksSpot(): vec3
ac.getFireworksSpot(index: integer): vec3
ac.getFireworksSpotCount(): integer
ac.addFireworkFlash(group: integer, pos: vec3, color: rgb, duration: number)
ac.loadSoundbank(soundbank: string, guids: string = nullptr): boolean // Returns `true` if both files were found. 
ac.isAudioReady(): boolean
ac.setAudioEventMultiplier(surfaceWav: string, mult: number): boolean
render.isVisible(center: vec3, radius: number): boolean
render.setBlendMode(mode: render.BlendMode)
render.setCullMode(mode: render.CullMode)
render.setDepthMode(mode: render.DepthMode)
render.glSetColor(color: rgbm)
render.glBegin(primitiveType: render.GLPrimitiveType)
render.glVertex(v: vec3)
render.glVertexTextured(v: vec3, uv: vec2)
render.glTexture(filename: string)
render.glEnd()
render.circle(pos: vec3, dir: vec3, radius: number, color: rgbm = rgbm(1, 1, 1, 1), borderColor: rgbm = nullptr)
render.rectangle(pos: vec3, dir: vec3, width: number, height: number, color: rgbm = rgbm(1, 1, 1, 1))
render.quad(p1: vec3, p2: vec3, p3: vec3, p4: vec3, color: rgbm = rgbm(1, 1, 1, 1), texture: string = nullptr)
render.setTransform(t: mat4x4, applySceneOriginOffset: boolean = false)
render.debugText(pos: vec3, text: string, color: rgbm = rgbm(1, 1, 1, 1), scale: number = 1, align: render.FontAlign = AC::FontAlign::center)
render.debugSphere(center: vec3, radius: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugCross(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugBox(center: vec3, size: vec3, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPoint(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPlane(center: vec3, dir: vec3, color: rgbm = rgbm(3, 0, 0, 1), size: number = 1)
render.debugLine(from: vec3, to: vec3, color: rgbm = rgbm(3, 0, 0, 1))
render.debugArrow(from: vec3, to: vec3, size: number = -1, color: rgbm = rgbm(3, 0, 0, 1))
render.getRenderTargetSize(): vec2
render.backupRenderTarget(): boolean
render.restoreRenderTarget(): boolean